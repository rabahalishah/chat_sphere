npm install express dotenv cookie-parser bcryptjs mongoose socket.io jsonwebtoken
npm install nodemon --save-dev

openssl rand -base64 32 // for generating a secure random key

// In package.json

// ...rest ot the code
"type": "module"
// ...rest ot the code

This will help us using "import" keyword instead of "require" but we also have to add extension name at the end of each file
otherwise we will get error e.g import { getUsersForSidebar } from '../controllers/user.controller.js'; dont forget to add ".js"

***********Message.model.js
import mongoose from 'mongoose';

const messageSchema = new mongoose.Schema(
  {
    senderId: {
      type: mongoose.Schema.Types.ObjectId, //these are showing that there will be id from User model
      ref: 'User',
      required: true,
    },
    receiverId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
      required: true,
    },
    message: {
      type: String,
      required: true,
    },
  },
  //timestamps: createdAt and updatedAt
  { timestamps: true }
);

const Message = mongoose.model('Message', messageSchema);

export default Message;

**********Conversation model

import mongoose from 'mongoose';

const conversationSchema = new mongoose.Schema(
  {
    participants: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
    messages: [
      { type: mongoose.Schema.Types.ObjectId, ref: 'Message', default: [] },
    ],
  },
  { timestamps: true }
);

const Conversation = mongoose.model('Conversation', conversationSchema);

export default Conversation;


**************Front end
npm i react-icons
npm i -D daisyui@latest
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
npm install react-router-dom
npm install react-hot-toast
npm install zustand
npm install socket.io-client


******Vite Config file
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    proxy: {
      '/api': { target: 'http://localhost:5000' },
    },
  },
});

***********socket.io
When a user send a message it sends a request to the backend server which takes that data and pass through 
the whole pipeline that we created and then save it to the database. But the receiver must have to reload his
page to get that message. This not real time. So to make it real time we create a server on top of our
node server which is a socket.io server. This server save the message to the database and send that message
immediately to the user making it real time.